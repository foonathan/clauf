# Copyright (C) 2022 Jonathan MÃ¼ller and clauf contributors
# SPDX-License-Identifier: BSL-1.0

#=== external dependencies ===#
include(FetchContent)

FetchContent_Declare(lexy URL https://lexy.foonathan.net/download/lexy-src.zip)
FetchContent_MakeAvailable(lexy)

FetchContent_Declare(lauf URL https://github.com/foonathan/lauf/archive/refs/heads/main.zip)
FetchContent_MakeAvailable(lauf)

file(DOWNLOAD 
        https://github.com/CLIUtils/CLI11/releases/download/v2.2.0/CLI11.hpp 
        ${CMAKE_CURRENT_BINARY_DIR}/CLI11.hpp)

#=== main executable ===#
add_executable(clauf main.cpp)
target_compile_features(clauf PRIVATE cxx_std_17)
target_include_directories(clauf PRIVATE ../include)
target_include_directories(clauf SYSTEM PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
target_link_libraries(clauf PRIVATE foonathan::lexy foonathan::lauf)

if(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    if("${CMAKE_CXX_SIMULATE_ID}" STREQUAL "MSVC")
        target_compile_options(clauf PRIVATE /WX /W3 /D _CRT_SECURE_NO_WARNINGS)
    else()
        target_compile_options(clauf PRIVATE -pedantic-errors -Werror -Wall -Wextra -Wconversion -Wsign-conversion)
    endif()
elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
    target_compile_options(clauf PRIVATE -pedantic-errors -Werror -Wall -Wextra -Wconversion -Wsign-conversion)
elseif(MSVC)
    target_compile_options(clauf PRIVATE /WX /W3 /D _CRT_SECURE_NO_WARNINGS)
endif()

